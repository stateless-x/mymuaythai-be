import { db, pool } from './config';
import * as schema from './schema';
// import { v4 as uuidv4 } from 'uuid'; // Not strictly needed if IDs are auto-generated
import { sql } from 'drizzle-orm';
import type { NewProvince, NewClass, NewTag, NewGym, NewGymImage, NewTrainer, NewUser, NewTrainerClass, NewTrainerTag, NewGymTag } from '../types';

export async function seedData() {
  console.log('üå± Starting to seed data with new ERD-aligned schema...');

  try {
    console.log('üóëÔ∏è Clearing existing data from ERD-aligned tables...');
    // Order of deletion matters due to foreign key constraints
    // Start with tables that are referenced by others, or junction tables first

    await db.delete(schema.trainerTags);
    await db.delete(schema.trainerClasses);
    await db.delete(schema.gymTags);
    await db.delete(schema.gymImages);
    // await db.delete(schema.gymClassTypes); // This table is removed in the new schema
    // await db.delete(schema.gymTrainers); // This table is removed in the new schema

    // Then tables that are referenced
    await db.delete(schema.trainers); // Trainers might reference gyms or provinces
    await db.delete(schema.gyms);     // Gyms reference provinces
    await db.delete(schema.tags);
    await db.delete(schema.classes);  // Renamed from classTypes
    await db.delete(schema.provinces);
    await db.delete(schema.users); // Clearing users for a full fresh seed

    console.log('‚úÖ Data cleared.');

    // 1. Seed Provinces
    console.log('üåç Seeding Provinces...');
    const provincesData: NewProvince[] = [
      { name_th: '‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£', name_en: 'Bangkok' },
      { name_th: '‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà', name_en: 'Chiang Mai' },
      { name_th: '‡∏†‡∏π‡πÄ‡∏Å‡πá‡∏ï', name_en: 'Phuket' },
      { name_th: '‡∏ä‡∏•‡∏ö‡∏∏‡∏£‡∏µ', name_en: 'Chon Buri' },
      { name_th: '‡∏™‡∏∏‡∏£‡∏≤‡∏©‡∏é‡∏£‡πå‡∏ò‡∏≤‡∏ô‡∏µ', name_en: 'Surat Thani' },
    ];
    const insertedProvinces = await db.insert(schema.provinces).values(provincesData).returning();
    console.log(`‚úÖ Seeded ${insertedProvinces.length} provinces.`);
    const bangkok = insertedProvinces.find(p => p.name_en === 'Bangkok');
    const chiangMai = insertedProvinces.find(p => p.name_en === 'Chiang Mai');

    if (!bangkok || !chiangMai) {
        console.error('üö® Could not find Bangkok or Chiang Mai after seeding provinces.');
        await pool.end();
        return;
    }

    // 2. Seed Users (example) - Remove hardcoded IDs, let UUID auto-generate
    console.log('üë§ Seeding Users...');
    const usersData: NewUser[] = [
      { email: 'admin@mymuaythai.com', role: 'admin' }, // No id field - let it auto-generate
      { email: 'user@mymuaythai.com', role: 'user' },
    ];
    const insertedUsers = await db.insert(schema.users).values(usersData).returning();
    console.log(`‚úÖ Seeded ${insertedUsers.length} users.`);
    // const adminUser = insertedUsers.find(u => u.email === 'admin@mymuaythai.com');

    // 3. Seed Classes (formerly ClassTypes) - Remove hardcoded IDs
    console.log('ü•ä Seeding Classes...');
    const classesData: NewClass[] = [
      { name_th: '‡∏°‡∏ß‡∏¢‡πÑ‡∏ó‡∏¢‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô', name_en: 'Basic Muay Thai', description_th: '‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏°‡∏ß‡∏¢‡πÑ‡∏ó‡∏¢', description_en: 'Learn the basics of Muay Thai' },
      { name_th: '‡∏°‡∏ß‡∏¢‡πÑ‡∏ó‡∏¢‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á', name_en: 'Advanced Muay Thai', description_th: '‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå', description_en: 'For experienced practitioners' },
      { name_th: '‡∏°‡∏ß‡∏¢‡πÑ‡∏ó‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏î‡πá‡∏Å', name_en: 'Muay Thai for Kids', description_th: '‡∏™‡∏≠‡∏ô‡∏°‡∏ß‡∏¢‡πÑ‡∏ó‡∏¢‡πÉ‡∏´‡πâ‡πÄ‡∏î‡πá‡∏Å‡πÜ', description_en: 'Muay Thai classes for children' },
      { name_th: '‡∏Ñ‡∏≤‡∏£‡πå‡∏î‡∏¥‡πÇ‡∏≠ ‡∏°‡∏ß‡∏¢‡πÑ‡∏ó‡∏¢', name_en: 'Cardio Muay Thai', description_th: '‡∏°‡∏ß‡∏¢‡πÑ‡∏ó‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢', description_en: 'Muay Thai for fitness' },
    ];
    const insertedClasses = await db.insert(schema.classes).values(classesData).returning();
    console.log(`‚úÖ Seeded ${insertedClasses.length} classes.`);
    const basicMuayThai = insertedClasses.find(c => c.name_en === 'Basic Muay Thai');
    const advancedMuayThai = insertedClasses.find(c => c.name_en === 'Advanced Muay Thai');

    if (!basicMuayThai || !advancedMuayThai) {
        console.error('üö® Could not find basic or advanced Muay Thai class after seeding.');
        await pool.end();
        return;
    }

    // 4. Seed Tags
    console.log('üè∑Ô∏è Seeding Tags...');
    const tagsData: NewTag[] = [
      { name_th: '‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô', name_en: 'Beginner Friendly' },
      { name_th: '‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏°‡∏∑‡∏≠‡πÇ‡∏õ‡∏£', name_en: 'For Professionals' },
      { name_th: '‡∏ö‡∏£‡∏£‡∏¢‡∏≤‡∏Å‡∏≤‡∏®‡∏î‡∏µ', name_en: 'Good Atmosphere' },
      { name_th: '‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏Ñ‡∏£‡∏ö‡∏Ñ‡∏£‡∏±‡∏ô', name_en: 'Fully Equipped' },
      { name_th: '‡∏™‡∏≠‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©', name_en: 'English Speaking' },
    ];
    const insertedTags = await db.insert(schema.tags).values(tagsData).returning();
    console.log(`‚úÖ Seeded ${insertedTags.length} tags.`);
    const beginnerTag = insertedTags.find(t => t.name_en === 'Beginner Friendly');
    const englishSpeakingTag = insertedTags.find(t => t.name_en === 'English Speaking');

    if (!beginnerTag || !englishSpeakingTag) {
        console.error('üö® Could not find beginner or english speaking tag after seeding.');
        await pool.end();
        return;
    }


    // 5. Seed Gyms
    console.log('Ô∏èüèãÔ∏è Seeding Gyms...');
    const gymsData: NewGym[] = [
      {
        name_th: '‡∏¢‡∏≠‡∏î‡∏°‡∏ß‡∏¢‡∏¢‡∏¥‡∏° ‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û',
        name_en: 'Yodmuay Gym Bangkok',
        description_th: '‡∏¢‡∏¥‡∏°‡∏°‡∏ß‡∏¢‡πÑ‡∏ó‡∏¢‡∏ö‡∏£‡∏£‡∏¢‡∏≤‡∏Å‡∏≤‡∏®‡∏î‡∏µ ‡∏™‡∏≠‡∏ô‡πÇ‡∏î‡∏¢‡∏Ñ‡∏£‡∏π‡∏°‡∏ß‡∏¢‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏™‡∏π‡∏á ‡πÉ‡∏à‡∏Å‡∏•‡∏≤‡∏á‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û',
        description_en: 'Authentic Muay Thai gym with experienced trainers in central Bangkok.',
        phone: '0812345678',
        email: 'info@yodmuaygym-bkk.com',
        province_id: bangkok.id,
        map_url: 'https://maps.app.goo.gl/yodmuaybkk',
        youtube_url: 'https://youtube.com/yodmuaybkk',
        line_id: '@yodmuaybkk',
        // created_at will default
        // is_active will default to true
      },
      {
        name_th: '‡∏•‡∏≤‡∏ô‡∏ô‡∏≤‡∏°‡∏ß‡∏¢‡πÑ‡∏ó‡∏¢ ‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà',
        name_en: 'Lanna Muay Thai Chiang Mai',
        description_th: '‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏°‡∏ß‡∏¢‡πÑ‡∏ó‡∏¢‡∏ó‡πà‡∏≤‡∏°‡∏Å‡∏•‡∏≤‡∏á‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà ‡∏™‡∏á‡∏ö‡πÅ‡∏•‡∏∞‡πÄ‡∏Ç‡πâ‡∏°‡∏Ç‡πâ‡∏ô',
        description_en: 'Learn Muay Thai in the beautiful surroundings of Chiang Mai. Serene and intense.',
        phone: '0987654321',
        email: 'info@lannamuaythai-cm.com',
        province_id: chiangMai.id,
        map_url: 'https://maps.app.goo.gl/lannacm',
        line_id: '@lannacm',
      },
    ];
    const insertedGyms = await db.insert(schema.gyms).values(gymsData).returning();
    console.log(`‚úÖ Seeded ${insertedGyms.length} gyms.`);
    const yodmuayGym = insertedGyms.find(g => g.name_en === 'Yodmuay Gym Bangkok');
    const lannaGym = insertedGyms.find(g => g.name_en === 'Lanna Muay Thai Chiang Mai');

    if (!yodmuayGym || !lannaGym) {
        console.error('üö® Could not find Yodmuay Gym or Lanna Gym after seeding.');
        await pool.end();
        return;
    }
    
    // 6. Seed Gym Images
    console.log('üì∏ Seeding Gym Images...');
    const gymImagesData: NewGymImage[] = [
        { gym_id: yodmuayGym.id, image_url: 'https://picsum.photos/seed/yodmuaybkk1/800/600' },
        { gym_id: yodmuayGym.id, image_url: 'https://picsum.photos/seed/yodmuaybkk2/800/600' },
        { gym_id: lannaGym.id, image_url: 'https://picsum.photos/seed/lannacm1/800/600' },
    ];
    const insertedGymImages = await db.insert(schema.gymImages).values(gymImagesData).returning();
    console.log(`‚úÖ Seeded ${insertedGymImages.length} gym images.`);

    // 7. Seed Trainers
    console.log('üèÜ Seeding Trainers...');
    const trainersData: NewTrainer[] = [
      {
        first_name_th: '‡∏¢‡∏≠‡∏î', last_name_th: '‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏™‡∏á‡∏ß‡∏ô',
        first_name_en: 'Yod', last_name_en: 'Suksasuan',
        bio_th: '‡∏≠‡∏î‡∏µ‡∏ï‡πÅ‡∏ä‡∏°‡∏õ‡πå‡∏´‡∏•‡∏≤‡∏¢‡∏™‡∏°‡∏±‡∏¢ ‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏™‡∏≠‡∏ô‡∏Å‡∏ß‡πà‡∏≤ 20 ‡∏õ‡∏µ ‡πÄ‡∏ô‡πâ‡∏ô‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ‡πÅ‡∏•‡∏∞‡∏û‡∏•‡∏∞‡∏Å‡∏≥‡∏•‡∏±‡∏á',
        bio_en: 'Former champion with over 20 years of teaching experience. Focus on technique and power.',
        phone: '0811112222',
        email: 'yod.s@example.com',
        line_id: 'kruyodmuaythai',
        is_freelance: false,
        gym_id: yodmuayGym.id, // Affiliated with Yodmuay Gym
        province_id: bangkok.id, // Based in Bangkok
        // profile_image_url: 'https://picsum.photos/seed/kruyod/300/300' // profile_image_url not in ERD for trainers
      },
      {
        first_name_th: '‡πÅ‡∏Å‡πâ‡∏ß', last_name_th: '‡πÉ‡∏à‡∏î‡∏µ',
        first_name_en: 'Kaew', last_name_en: 'Jaidee',
        bio_th: '‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡∏°‡∏ß‡∏¢‡πÑ‡∏ó‡∏¢‡πÇ‡∏ö‡∏£‡∏≤‡∏ì‡πÅ‡∏•‡∏∞‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ‡∏Å‡∏≤‡∏£‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏ï‡∏±‡∏ß ‡∏™‡∏≠‡∏ô‡∏™‡∏ô‡∏∏‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏±‡∏ô‡πÄ‡∏≠‡∏á',
        bio_en: 'Specializes in ancient Muay Thai and self-defense techniques. Fun and friendly teaching style.',
        phone: '0822223333',
        email: 'kaew.j@example.com',
        is_freelance: true, // Freelance trainer
        province_id: chiangMai.id, // Based in Chiang Mai, but freelance
        // gym_id is null for freelance
      },
    ];
    const insertedTrainers = await db.insert(schema.trainers).values(trainersData).returning();
    console.log(`‚úÖ Seeded ${insertedTrainers.length} trainers.`);
    const kruYod = insertedTrainers.find(t => t.email === 'yod.s@example.com');
    const kruKaew = insertedTrainers.find(t => t.email === 'kaew.j@example.com');

    if (!kruYod || !kruKaew) {
        console.error('üö® Could not find Kru Yod or Kru Kaew after seeding.');
        await pool.end();
        return;
    }

    // 8. Link Gyms with Tags (GymTags)
    console.log('üîó Linking Gyms with Tags...');
    const gymTagsData: NewGymTag[] = [
        { gym_id: yodmuayGym.id, tag_id: beginnerTag.id },
        { gym_id: yodmuayGym.id, tag_id: englishSpeakingTag.id },
        { gym_id: lannaGym.id, tag_id: beginnerTag.id },
    ];
    await db.insert(schema.gymTags).values(gymTagsData);
    console.log(`‚úÖ Linked ${gymTagsData.length} gym-tag relationships.`);

    // 9. Link Trainers with Classes (TrainerClasses)
    console.log('üîó Linking Trainers with Classes...');
    const trainerClassesData: NewTrainerClass[] = [
        { trainer_id: kruYod.id, class_id: basicMuayThai.id },
        { trainer_id: kruYod.id, class_id: advancedMuayThai.id },
        { trainer_id: kruKaew.id, class_id: basicMuayThai.id }, // Kru Kaew also teaches basic
    ];
    await db.insert(schema.trainerClasses).values(trainerClassesData);
    console.log(`‚úÖ Linked ${trainerClassesData.length} trainer-class relationships.`);

    // 10. Link Trainers with Tags (TrainerTags) - Example: Specializations
    console.log('üîó Linking Trainers with Tags...');
    const professionalTag = insertedTags.find(t => t.name_en === 'For Professionals');
    if(professionalTag) {
        const trainerTagsData: NewTrainerTag[] = [
            { trainer_id: kruYod.id, tag_id: professionalTag.id }, // Kru Yod is for pros
            { trainer_id: kruKaew.id, tag_id: beginnerTag.id },    // Kru Kaew is beginner friendly
        ];
        await db.insert(schema.trainerTags).values(trainerTagsData);
        console.log(`‚úÖ Linked ${trainerTagsData.length} trainer-tag relationships.`);
    }
    
    console.log('üéâ Seed data completed successfully!');
  } catch (error) {
    console.error('‚ùå Error seeding data:', error);
    // Ensure pool is closed even on error, but after logging
    await pool.end();
    console.log('Database pool closed after error in seeding.');
    process.exit(1); // Exit with error code
  } finally {
    // This block might be redundant if errors are handled and exit, 
    // but good for ensuring pool closure if no explicit exit occurs in catch.
    if (pool && !(pool as any)._ended) { // Check if pool exists and not already ended
        await pool.end();
        console.log('Database pool closed after seeding operation completed.');
    }
  }
}

if (require.main === module) {
  seedData();
} 