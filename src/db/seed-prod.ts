import '../config/environment';
import { db, pool } from './config';
import * as schema from './schema';
import { seedProvinces } from './province-seed';
import { eq } from 'drizzle-orm';
import bcrypt from 'bcrypt';

// These are the essential tags and classes required for the application to function.
// They are hardcoded to ensure consistency across all production-like environments.
const PROD_TAGS = [
    { name_th: '‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô', name_en: 'Beginner Friendly', slug: 'beginner-friendly' },
    { name_th: '‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏°‡∏∑‡∏≠‡πÇ‡∏õ‡∏£', name_en: 'For Professionals', slug: 'for-professionals' },
    { name_th: '‡∏ö‡∏£‡∏£‡∏¢‡∏≤‡∏Å‡∏≤‡∏®‡∏î‡∏µ', name_en: 'Good Atmosphere', slug: 'good-atmosphere' },
    { name_th: '‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏Ñ‡∏£‡∏ö‡∏Ñ‡∏£‡∏±‡∏ô', name_en: 'Fully Equipped', slug: 'fully-equipped' },
    { name_th: '‡πÉ‡∏ä‡πâ‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©', name_en: 'English Speaking', slug: 'english-speaking' },
];

const PROD_CLASSES = [
    { name_th: '‡∏°‡∏ß‡∏¢‡πÑ‡∏ó‡∏¢‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô', name_en: 'Basic Muay Thai', description_th: '‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏°‡∏ß‡∏¢‡πÑ‡∏ó‡∏¢', description_en: 'Learn the basics of Muay Thai' },
    { name_th: '‡∏°‡∏ß‡∏¢‡πÑ‡∏ó‡∏¢‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á', name_en: 'Advanced Muay Thai', description_th: '‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå', description_en: 'For experienced practitioners' },
    { name_th: '‡∏Ñ‡∏≤‡∏£‡πå‡∏î‡∏¥‡πÇ‡∏≠', name_en: 'Cardio', description_th: '‡∏°‡∏ß‡∏¢‡πÑ‡∏ó‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢', description_en: 'Muay Thai for fitness' },
];

async function seedProdData() {
  console.log('üå± Seeding essential production data...');

  // 1. Seed Provinces
  await seedProvinces();

  // 2. Seed Admin Users
  console.log('üë§ Seeding admin users...');
  
  const adminsToSeed = [
    {
      email: process.env.ADMIN_EMAIL,
      password: process.env.ADMIN_PASSWORD,
      role: 'admin' as const
    },
    {
      email: process.env.DEV_EMAIL,
      password: process.env.DEV_PASSWORD,
      role: 'admin' as const
    }
  ];

  for (const admin of adminsToSeed) {
    if (!admin.email || !admin.password) {
      console.warn(`‚ö†Ô∏è  Skipping an admin user due to missing credentials. Check ADMIN_EMAIL, ADMIN_PASSWORD, DEV_EMAIL, DEV_PASSWORD environment variables.`);
      continue;
    }
    
    const existingAdmin = await db.query.adminUsers.findFirst({
      where: eq(schema.adminUsers.email, admin.email),
    });

    if (!existingAdmin) {
      const hashedPassword = await bcrypt.hash(admin.password, 10);
      await db.insert(schema.adminUsers).values({
        email: admin.email,
        password: hashedPassword,
        role: admin.role,
      });
      console.log(`‚úÖ Admin user created: ${admin.email}`);
    } else {
      console.log(`‚úÖ Admin user already exists: ${admin.email}`);
    }
  }

  // 3. Seed Tags and Classes
  console.log('üè∑Ô∏è Seeding essential tags and classes...');
  await db.insert(schema.tags).values(PROD_TAGS).onConflictDoNothing();
  await db.insert(schema.classes).values(PROD_CLASSES).onConflictDoNothing();
  console.log('‚úÖ Essential tags and classes seeded.');
}

async function main() {
  try {
    console.log('üöÄ Starting PRODUCTION database seeding process...');
    console.warn('‚ö†Ô∏è  This script is intended for production-like environments.');
    console.warn('‚ö†Ô∏è  It will only seed essential data and will NOT create mock gyms or trainers.');

    await seedProdData();

    console.log('\nüéâ Production seeding completed successfully!');
  } catch (error) {
    console.error('\n‚ùå An error occurred during the production seeding process:', error);
    process.exit(1);
  } finally {
    await pool.end().catch(console.error);
  }
}

main(); 